<?xml version="1.0" encoding="utf-8" ?>
<ArrayOfConfigLanguage>
	 <ConfigLanguage name="C++" StartComment="/*" EndComment="*/" CaseInsensitive="true">
    <formats>
      <format name="Text" Font="Cascadia Code SemiLight, 13pt"   FontColor="#f8f8f2" />
      <format name="Whitespace" Font="Cascadia Code, 13pt" FontColor="Black" />
      <format name="KeyWord" Font="Cascadia Code, 13pt" FontColor="#bd93f9" />
      <format name="ImageProcessor" Font="Cascadia Code, 13pt" FontColor="Blue" UseCustomControl="true" />
      <format name="String" Font="Cascadia Code SemiLight, 13pt" FontColor="#ff5555" BorderColor="#b00000" />
      <format name="Number" Font="Cascadia Code, 13pt" FontColor="#f1fa8c" />
      <format name="Error" Font="Cascadia Code, 13pt" FontColor="#f8f8f2" underline="Wave" LineColor="Red" />
      <format name="Operator" Font="Cascadia Code, 13pt" FontColor="#f1fa8c" />
      <format name="Comment" Font="Cascadia Code SemiLight, 13pt" FontColor="#6272a4" />
      <format name="PreprocessorKeyword" Font="Cascadia Code, 13pt" FontColor="Gray" />
      <format name="SelectedText" Font="Cascadia Code, 13pt" BackColor="Highlight" FontColor="HighlightText" />
      <format name="CommentXML" Font="Cascadia Code, 13pt" FontColor="Gray" />
      <format name="CollapsedText" Font="Cascadia Code, 13pt" FontColor="Black" BorderColor="Gray" BorderStyle="Solid" />
        <format name="Function" Font="Cascadia Code, 13pt" FontColor="#0A88AE" />
				
    </formats>
    <extensions>
      <extension>cpp</extension>
      <extension>C</extension>
    </extensions>
    <lexems>
      <lexem BeginBlock="." Type="Operator"/>
      <lexem BeginBlock="," Type="Operator"/>
      <lexem BeginBlock="=" Type="Operator" />
     <!-- <lexem BeginBlock="(" Type="Operator" IsComplex="true" DropContextPrompt="true" /> -->
      <lexem BeginBlock="+" Type="Operator"   />
      <lexem BeginBlock="-" Type="Operator" />
      <lexem BeginBlock="/" Type="Operator" />
      <lexem BeginBlock="*" Type="Operator" />
      <lexem BeginBlock="!=" Type="Operator" />
      <lexem BeginBlock="==" Type="Operator" />
      <lexem BeginBlock="-=" Type="Operator" />
      <lexem BeginBlock="+=" Type="Operator" />
      <lexem BeginBlock="=-" Type="Operator" />
      <lexem BeginBlock="=+" Type="Operator" />
      <lexem BeginBlock="*=" Type="Operator" />
      <lexem BeginBlock="/=" Type="Operator" />
      <lexem BeginBlock="=*" Type="Operator" />
      <lexem BeginBlock="=/" Type="Operator" />
      <lexem BeginBlock="++" Type="Operator" />
      <lexem BeginBlock="--" Type="Operator" />
      <lexem BeginBlock=";" Type="Operator" />
      <lexem BeginBlock="&lt;" Type="Operator" />
      <lexem BeginBlock="&gt;" Type="Operator" />
      <lexem BeginBlock=":" Type="Operator" />    
      <lexem BeginBlock="," Type="Operator" />
      <lexem BeginBlock="asm" Type="KeyWord" />
      <lexem BeginBlock="And" Type="KeyWord" />
      <lexem BeginBlock="and_eq" Type="KeyWord" />
      <lexem BeginBlock="bitor" Type="KeyWord" />
      <lexem BeginBlock="compl" Type="KeyWord" />
      <lexem BeginBlock="auto" Type="KeyWord" />
      <lexem BeginBlock="long" Type="KeyWord" />
      <lexem BeginBlock="bool" Type="KeyWord" />
      <lexem BeginBlock="break" Type="KeyWord" />
      <lexem BeginBlock="operator" Type="KeyWord" />
      <lexem BeginBlock="case" Type="KeyWord" />
      <lexem BeginBlock="catch" Type="KeyWord" />
      <lexem BeginBlock="char" Type="KeyWord" />
      <lexem BeginBlock="class" Type="KeyWord" />
      <lexem BeginBlock="protected" Type="KeyWord" />
      <lexem BeginBlock="const" Type="KeyWord" />
      <lexem BeginBlock="const_cast" Type="KeyWord" />
      <lexem BeginBlock="public" Type="KeyWord" />
      <lexem BeginBlock="private" Type="KeyWord" />
      <lexem BeginBlock="continue" Type="KeyWord" />
      <lexem BeginBlock="register" Type="KeyWord" />

          <lexem BeginBlock="printf" Type="Function" />
       <lexem BeginBlock="pow" Type="Function" />
       <lexem BeginBlock="gamma" Type="Function" />
       <lexem BeginBlock="log" Type="Function" />
       <lexem BeginBlock="log10" Type="Function" />
       <lexem BeginBlock="modf" Type="Function" />
       <lexem BeginBlock="sqrt" Type="Function" />
       <lexem BeginBlock="sin" Type="Function" />
       <lexem BeginBlock="isalpha" Type="Function" />
       <lexem BeginBlock="tan" Type="Function" />
       <lexem BeginBlock="isdigit" Type="Function" />
       <lexem BeginBlock="acos" Type="Function" />
       <lexem BeginBlock="asin" Type="Function" />
       <lexem BeginBlock="atan" Type="Function" />
       <lexem BeginBlock="cos" Type="Function" />
       <lexem BeginBlock="islower" Type="Function" />
        <lexem BeginBlock="exp" Type="Function" />
        <lexem BeginBlock="abs" Type="Function" />
        <lexem BeginBlock="isalnum" Type="Function" />
        <lexem BeginBlock="isupper" Type="Function" />
        <lexem BeginBlock="toupper" Type="Function" />
        <lexem BeginBlock="tolower" Type="Function" />
        <lexem BeginBlock="scanf" Type="Function" />
        <lexem BeginBlock="getch" Type="Function" />

      <lexem BeginBlock="reinterprett_cast" Type="KeyWord" />
      <lexem BeginBlock="decimal" Type="KeyWord" />
      <lexem BeginBlock="mutable" Type="KeyWord" />
      <lexem BeginBlock="default" Type="KeyWord" />
      <lexem BeginBlock="return" Type="KeyWord" />
      <lexem BeginBlock="delete" Type="KeyWord" />
      <lexem BeginBlock="do" Type="KeyWord" />
      <lexem BeginBlock="double" Type="KeyWord" />
      <lexem BeginBlock="dynamic_cast" Type="KeyWord" />
      <lexem BeginBlock="short" Type="KeyWord" />
      <lexem BeginBlock="else" Type="KeyWord" />
      <lexem BeginBlock="sizeof" Type="KeyWord" />
      <lexem BeginBlock="enum" Type="KeyWord" />
      <lexem BeginBlock="static_cast" Type="KeyWord" />
      <lexem BeginBlock="static" Type="KeyWord" />
      <lexem BeginBlock="explicit" Type="KeyWord" />
      <lexem BeginBlock="export" Type="KeyWord" />
      <lexem BeginBlock="extern" Type="KeyWord" />
      <lexem BeginBlock="string" Type="KeyWord" />
      <lexem BeginBlock="extern" Type="KeyWord" />
      <lexem BeginBlock="struct" Type="KeyWord" />
      <lexem BeginBlock="false" Type="KeyWord" />
      <lexem BeginBlock="switch" Type="KeyWord"  IsComplex="true" DropContextPrompt="true"/>
      <lexem BeginBlock="finally" Type="KeyWord" />
      <lexem BeginBlock="friend" Type="KeyWord" />
      <lexem BeginBlock="true" Type="KeyWord" />
      <lexem BeginBlock="for" Type="KeyWord" IsComplex="true" DropContextPrompt="true" />
      <lexem BeginBlock="try" Type="KeyWord" />
      <lexem BeginBlock="typedef" Type="KeyWord" />
      <lexem BeginBlock="typeid" Type="KeyWord" />
      <lexem BeginBlock="typename" Type="KeyWord" />
      <lexem BeginBlock="goto" Type="KeyWord" />
      <lexem BeginBlock="if" Type="KeyWord" IsComplex="true" DropContextPrompt="true"/>
      <lexem BeginBlock="union" Type="KeyWord" />
      <lexem BeginBlock="unsignd" Type="KeyWord" />
      <lexem BeginBlock="int" Type="KeyWord" />
      <lexem BeginBlock="ushort" Type="KeyWord" />
      <lexem BeginBlock="interface" Type="KeyWord" />
      <lexem BeginBlock="internal" Type="KeyWord" />
      <lexem BeginBlock="virtual" Type="KeyWord" />
      <lexem BeginBlock="or" Type="KeyWord" />
      <lexem BeginBlock="xor" Type="KeyWord" />
      <lexem BeginBlock="xor_eq" Type="KeyWord" />
      <lexem BeginBlock="or_eq" Type="KeyWord" />
      <lexem BeginBlock="not_eq" Type="KeyWord" />
      <lexem BeginBlock="not" Type="KeyWord" />
      <lexem BeginBlock="inline" Type="KeyWord" />
      <lexem BeginBlock="void" Type="KeyWord" />
      <lexem BeginBlock="volatile" Type="KeyWord" />
      <lexem BeginBlock="while" Type="KeyWord" IsComplex="true" DropContextPrompt="true"  />
      <lexem BeginBlock="wchar_t" Type="KeyWord" />
     <lexem BeginBlock="/*" EndBlock="*/" Type="Comment" OnlyLocalSublexems="true" IsComplex="true"
        IsCollapsable="true" CollapseName="/*...*/">
        <SubLexems>
          <lexem BeginBlock="\n" IsBeginRegex="true" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="(" EndBlock=")" Type="Operator" IsComplex="true" IsCollapsable="false" DropContextPrompt="true"
        CollapseName="(...)">
        <SubLexems>
          <lexem BeginBlock="\n" IsBeginRegex="true" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="&quot;" EndBlock="(&quot;)|(@&quot;)" Type="String" IsEndRegex="true" IsComplex="true" OnlyLocalSublexems="true">
        <SubLexems>
          <lexem BeginBlock="\" EndBlock="&quot;" Type="String" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="'" EndBlock="'" Type="String" IsComplex="true" OnlyLocalSublexems="true">
        <SubLexems>
          <lexem BeginBlock="\" EndBlock=".+" IsEndRegex="true" Priority="2" Type="String" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="@&quot;" EndBlock="(&quot;)|(@&quot;)" Type="String" IsEndRegex="true" OnlyLocalSublexems="true" IsComplex="true">
        <SubLexems>
          <lexem BeginBlock="\n" IsBeginRegex="true" />
          <lexem BeginBlock="&quot;" EndBlock="&quot;" Type="String"/>
        </SubLexems>
      </lexem>
      <lexem BeginBlock="[" EndBlock="]" Type="Operator" IsComplex="true" IsCollapsable="false" DropContextPrompt="true"
        CollapseName="[...]">
        <SubLexems>
          <lexem BeginBlock="\" EndBlock="&quot;" Type="String" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="//" EndBlock="\n" IsEndRegex="true" Type="Comment" IsComplex="true"
        OnlyLocalSublexems="true" />
             <lexem BeginBlock="#" EndBlock="\n" IsEndRegex="true" Type="Function" IsComplex="true"
        OnlyLocalSublexems="true" />
      <lexem ID="1041" EndBlock="#endregion" Type="PreprocessorKeyword" IsComplex="true" >
        <SubLexems>
          <lexem BeginBlock="\n" IsBeginRegex="true" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="#region" EndBlock="\n" Type="PreprocessorKeyword" IsEndRegex="true" OnlyLocalSublexems="true"
        IsComplex="true" IsCollapsable="true" AutoNameExpression="(#region)\s*(?text>.*).*(?!\n)\n" AutoNameTemplate="${text}"
        IsCollapseAutoNamed="true" CollapseName="Unnamed Region" NextID="1041">
        <SubLexems>
          <lexem BeginBlock=".*(?!\n)" IsBeginRegex="true" Type="Text" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="\s" IsBeginRegex="true" Type="Whitespace" />
      <lexem BeginBlock="///" EndBlock="\n" IsEndRegex="true" Type="Comment" OnlyLocalSublexems="true"
        IsComplex="true">
        <SubLexems>
          <lexem BeginBlock="" EndBlock=">" Type="Custom" FormatName="CommentXML" IsComplex="true"
            OnlyLocalSublexems="true" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="[0-9]+" IsBeginRegex="true" Type="Number" />
      <lexem BeginBlock="[0-9]+" ContinueBlock="." EndBlock="[0-9]+" IsBeginRegex="true" IsEndRegex="true" Type="Number" />
      <lexem BeginBlock="{" EndBlock="}" Type="KeyWord" IsComplex="true" IsCollapsable="true" Indent="true" DropContextPrompt="true" CollapseName="{...}" IndentationGuideline="true">
        <SubLexems>
          <lexem BeginBlock="\n" IsBeginRegex="true" />
        </SubLexems>
      </lexem>
    </lexems>
    
    <splits>
      <split>@&quot;</split>
      <split>+=</split>
      <split>/=</split>
      <split>=/</split>
      <split>*=</split>
      <split>=*</split>
      <split>==</split>
      <split>!=</split>
      <split>=+</split>
      <split>-=</split>
      <split>++</split>
      <split>-=</split>
      <split>=-</split>
      <split>--</split>
      <split>/*</split>
      <split>*/</split>
      <split>//</split>
      <split>#region</split>
      <split>#endregion</split>
      <split>///</split>
    </splits>
  </ConfigLanguage>
  <ConfigLanguage name="Text" CaseInsensitive="true">
		<formats>
			<format name="Text" Font="Cascadia Code SemiLight, 13pt" FontColor="#f8f8f2" />
			
			
			<format name="Number" Font="Cascadia Code, 13pt" FontColor="#bd93f9" />
			
			<format name="SelectedText" Font="Cascadia Code, 13pt" BackColor="Highlight" FontColor="HighlightText" />
		</formats>		
		<lexems>	
			
			<lexem BeginBlock="[0-9]+" IsBeginRegex="true" Type="Number" />
			<lexem BeginBlock="$" EndBlock="^[0-9a-fA-F]+$" IsEndRegex="true" Type="Number" />
			
		</lexems>
		
</ConfigLanguage>
<ConfigLanguage name="Pascal" CaseInsensitive="true" Known="Delphi" StartComment="{" EndComment="}">
		<formats>
			<format name="Text" Font="Cascadia Code SemiLight, 13pt" FontColor="#f8f8f2" />
			<format name="Whitespace" Font="Cascadia Code, 13pt" FontColor="Black" />
			<format name="KeyWord" Font="Cascadia Code, 13pt" FontColor="#ff5555" />
			<format name="String" Font="Cascadia Code SemiLight, 13pt" FontColor="#f1fa8c" />
			<format name="Number" Font="Cascadia Code, 13pt" FontColor="#bd93f9" />
			<format name="Operator" Font="Cascadia Code, 13pt" FontColor="#8be9fd" />
			<format name="Comment" Font="Cascadia Code SemiLight, 13pt" FontColor="#6272a4"/>
			<format name="Error" Font="Courier New, 13pt" FontColor="#f8f8f2" underline="Wave" LineColor="Red" />
			<format name="PreprocessorKeyword" Font="Cascadia Code, 13pt" FontColor="Gray" />
			<format name="SelectedText" Font="Cascadia Code, 13pt" BackColor="Highlight" FontColor="HighlightText" />
			<format name="CommentXML" Font="Cascadia Code, 13pt" FontColor="Gray" />
			<format name="CollapsedText" Font="Cascadia Code, 13pt" FontColor="Black" BackColor="White"
				BorderColor="Gray" BorderStyle="Solid" />
					 <format name="Function" Font="Cascadia Code, 13pt" FontColor="#0AAE81" />
		</formats>
		<extensions>
			<extension>pas</extension>
		</extensions>
		<lexems>
			<lexem BeginBlock="}" Type="Error" Priority="-10" />
			
			
			<lexem BeginBlock="=" Type="Operator" />
			<lexem BeginBlock="+" Type="Operator" />
			<lexem BeginBlock="-" Type="Operator" />
			<lexem BeginBlock="/" Type="Operator" />
			<lexem BeginBlock="*" Type="Operator" />
			<lexem BeginBlock=";" Type="Operator" />
			<lexem BeginBlock=":" Type="Operator" />
			<lexem BeginBlock="." Type="Operator" />
			<lexem BeginBlock="," Type="Operator" />
			<lexem BeginBlock="^" Type="Operator" />
			<lexem BeginBlock="abstract" Type="KeyWord" />
			<lexem BeginBlock="long" Type="KeyWord" />
			<lexem BeginBlock="as" Type="KeyWord" />
			<lexem BeginBlock="begin" EndBlock="end" Type="KeyWord" IsComplex="true" IsCollapsable="true"
				CollapseName="begin..end" IndentationGuideline="true" Indent="true">
				<SubLexems>
					<lexem BeginBlock="\n" IsBeginRegex="true" />
				</SubLexems>
			</lexem>
			<!--lexem BeginBlock="end" Type="KeyWord" Priority="-1"/-->
			<lexem BeginBlock="program" Type="KeyWord"/>
			<lexem BeginBlock="boolean" Type="KeyWord" />
			<lexem BeginBlock="nil" Type="KeyWord" />
			<lexem BeginBlock="break" Type="KeyWord" />
			<lexem BeginBlock="object" Type="KeyWord" />
			<lexem BeginBlock="byte" Type="KeyWord" />
			<lexem BeginBlock="case" Type="KeyWord" DropContextPrompt="true" IsComplex="true"/>
			<lexem BeginBlock="out" Type="KeyWord" />
			<lexem BeginBlock="override" Type="KeyWord" />
			<lexem BeginBlock="char" Type="KeyWord" />
			<lexem BeginBlock="checked" Type="KeyWord" />
			<lexem BeginBlock="private" Type="KeyWord" />
			<lexem BeginBlock="class" Type="KeyWord" />
			<lexem BeginBlock="protected" Type="KeyWord" />
			<lexem BeginBlock="then" Type="KeyWord" />
			<lexem BeginBlock="mod" Type="KeyWord" />
			<lexem BeginBlock="div" Type="KeyWord" />
			<lexem BeginBlock="const" Type="KeyWord" />
			<lexem BeginBlock="public" Type="KeyWord" />
			<lexem BeginBlock="continue" Type="KeyWord" />
			<lexem BeginBlock="default" Type="KeyWord" />
			<lexem BeginBlock="do" Type="KeyWord" DropContextPrompt="true" IsComplex="true"/>
			<lexem BeginBlock="double" Type="KeyWord" />
			<lexem BeginBlock="short" Type="KeyWord" />
			<lexem BeginBlock="else" Type="KeyWord" />
			<lexem BeginBlock="sizeof" Type="KeyWord" />
			<lexem BeginBlock="set" Type="KeyWord" />
			<lexem BeginBlock="string" Type="KeyWord" />
			<lexem BeginBlock="record" Type="KeyWord" />
			<lexem BeginBlock="packed" Type="KeyWord" />
			<lexem BeginBlock="widestring" Type="KeyWord" />
			<lexem BeginBlock="longword" Type="KeyWord" />
			<lexem BeginBlock="false" Type="KeyWord" />
			<lexem BeginBlock="finally" Type="KeyWord" />
			<lexem BeginBlock="float" Type="KeyWord" />
			<lexem BeginBlock="true" Type="KeyWord" />
			<lexem BeginBlock="for" Type="KeyWord" DropContextPrompt="true" IsComplex="true"/>
			<lexem BeginBlock="to" Type="KeyWord" DropContextPrompt="true" IsComplex="true" />
			<lexem BeginBlock="typeof" Type="KeyWord" />
			<lexem BeginBlock="goto" Type="KeyWord" />
			<lexem BeginBlock="if" Type="KeyWord" IsComplex="true" DropContextPrompt="true"/>
			<lexem BeginBlock="integer" Type="KeyWord"/>
			<lexem BeginBlock="byte" Type="KeyWord"/>
			<lexem BeginBlock="longint" Type="KeyWord"/>
			<lexem BeginBlock="word" Type="KeyWord"/>
			<lexem BeginBlock="int64" Type="KeyWord"/>
			<lexem BeginBlock="longword" Type="KeyWord"/>
			<lexem BeginBlock="int" Type="KeyWord" />
			<lexem BeginBlock="function" Type="KeyWord" />
			<lexem BeginBlock="procedure" Type="KeyWord" />
			<lexem BeginBlock="safecall" Type="KeyWord" />
			<lexem BeginBlock="wordbool" Type="KeyWord" />
			<lexem BeginBlock="interface" Type="KeyWord" />
			<lexem BeginBlock="property" Type="KeyWord" />
			<lexem BeginBlock="readonly" Type="KeyWord" />
				<lexem BeginBlock="real" Type="KeyWord"/>


			<lexem BeginBlock="write" Type="Function" />
			<lexem BeginBlock="writeln" Type="Function" />
			<lexem BeginBlock="abs" Type="Function" />
			<lexem BeginBlock="arctan" Type="Function" />
			
<lexem BeginBlock="exp" Type="Function" />
			
<lexem BeginBlock="cos" Type="Function" />
			
<lexem BeginBlock="sqrt" Type="Function" />
			
<lexem BeginBlock="sqr" Type="Function" />
			
<lexem BeginBlock="trunc" Type="Function" />
			
<lexem BeginBlock="sin" Type="Function" />
			
<lexem BeginBlock="round" Type="Function" />
			<lexem BeginBlock="ln" Type="Function" />
			<lexem BeginBlock="read" Type="Function" />
			
<lexem BeginBlock="readln" Type="Function" />
			

			<lexem BeginBlock="dispinterface" Type="KeyWord" />
			<lexem BeginBlock="implementation" Type="KeyWord" />
			<lexem BeginBlock="initialization" Type="KeyWord" />
			<lexem BeginBlock="finalization" Type="KeyWord" />
			<lexem BeginBlock="uses" Type="KeyWord" />
			<lexem BeginBlock="var" Type="KeyWord" />
			<lexem BeginBlock="unit" Type="KeyWord" />
			<lexem BeginBlock="virtual" Type="KeyWord" />
			<lexem BeginBlock="is" Type="KeyWord" />
			<lexem BeginBlock="while" Type="KeyWord" IsComplex="true" DropContextPrompt="true" />
			<lexem BeginBlock="read" Type="KeyWord" />
			
			<lexem BeginBlock="type" Type="KeyWord" />
			<lexem BeginBlock="get" Type="KeyWord" />
			<lexem BeginBlock="set" Type="KeyWord" />
			<lexem BeginBlock="try" EndBlock="end" Type="KeyWord" IsComplex="true" IsCollapsable="true"
				CollapseName="Try Block">
				<SubLexems>
					<lexem BeginBlock="except" Type="KeyWord" />
					<lexem BeginBlock="finally" Type="KeyWord" />
					<lexem BeginBlock="\n" IsBeginRegex="true" />
				</SubLexems>
			</lexem>
			<lexem BeginBlock="(*" EndBlock="*)" Type="Comment" OnlyLocalSublexems="true" IsComplex="true"
				IsCollapsable="true" CollapseName="(*...*)">
				<SubLexems>
					<lexem BeginBlock="\n" IsBeginRegex="true" />
				</SubLexems>
			</lexem>
			<lexem BeginBlock="(" EndBlock=")" Type="Operator" IsComplex="true" IsCollapsable="false"
				CollapseName="(...)" IndentationGuideline="true">
				<SubLexems>
					<lexem BeginBlock="\n" IsBeginRegex="true" />
					
				</SubLexems>
			</lexem>
			<lexem BeginBlock="'" EndBlock="'" Type="String" OnlyLocalSublexems="true" IsComplex="true">
				<SubLexems>
					<lexem BeginBlock="'" EndBlock="'" Type="String" />
				</SubLexems>
			</lexem>
			<lexem BeginBlock="[" EndBlock="]" Type="Operator" IsComplex="true" IsCollapsable="false"
				CollapseName="[...]" IndentationGuideline="true" />
			<lexem BeginBlock="//" EndBlock="\n" IsEndRegex="true" Type="Comment" OnlyLocalSublexems="true"
				IsComplex="true" />
			<lexem BeginBlock="(\s(?&lt;!\n))+" IsBeginRegex="true" Type="Whitespace" />
			<lexem BeginBlock="[0-9]+" IsBeginRegex="true" Type="Number" />
			<lexem BeginBlock="$" EndBlock="^[0-9a-fA-F]+$" IsEndRegex="true" Type="Number" />
			<lexem BeginBlock="{" EndBlock="}" Type="Comment" IsComplex="true" IsCollapsable="true" IndentationGuideline="true"
				OnlyLocalSublexems="true" CollapseName="{...}">
				<SubLexems>
					<lexem BeginBlock="\n" IsBeginRegex="true" />
					<lexem BeginBlock="$" EndBlock="\w+" IsEndRegex="true" Type="PreprocessorKeyword" />
				</SubLexems>
			</lexem>
		</lexems>
		<splits>
			<split>@&quot;</split>
			<split>(*</split>
			<split>*)</split>
			<split>//</split>
		</splits>
</ConfigLanguage>
<ConfigLanguage name="Python">
    <formats>
      <format name="Text" Font="Cascadia Code SemiLight, 13pt"   FontColor="#f8f8f2" />
      <format name="Whitespace" Font="Cascadia Code, 13pt" FontColor="Black" />
      <format name="KeyWord" Font="Cascadia Code, 13pt" FontColor="#ffb86c" />
      <format name="ImageProcessor" Font="Cascadia Code, 13pt" FontColor="Blue" UseCustomControl="true" />
      <format name="String" Font="Cascadia Code SemiLight, 13pt" FontColor="#bd93f9" BorderColor="#50fa7b" />
      <format name="Number" Font="Cascadia Code, 13pt" FontColor="#ff79c6" />
      <format name="Error" Font="Cascadia Code, 13pt" FontColor="#f8f8f2" underline="Wave" LineColor="Red" />
      <format name="Operator" Font="Cascadia Code, 13pt" FontColor="#ffb86c" />
      <format name="Comment" Font="Cascadia Code SemiLight, 13pt" FontColor="#6272a4" />
      <format name="PreprocessorKeyword" Font="Cascadia Code, 13pt" FontColor="Gray" />
      <format name="SelectedText" Font="Cascadia Code, 13pt" BackColor="Highlight" FontColor="HighlightText" />
      <format name="CommentXML" Font="Cascadia Code, 13pt" FontColor="Gray" />
      <format name="CollapsedText" Font="Cascadia Code, 13pt" FontColor="Black" BorderColor="Gray"
				BorderStyle="Solid" />
        <format name="Function" Font="Cascadia Code, 13pt" FontColor="#21CD82"/>
    </formats>
    <extensions>
      <extension>py</extension>
      
    </extensions>
    <lexems>
      <lexem BeginBlock="." Type="Operator"/>
      <lexem BeginBlock="," Type="Operator" />
      <lexem BeginBlock="=" Type="Operator" />
      <lexem BeginBlock="+" Type="Operator" />
      <lexem BeginBlock="-" Type="Operator" />
      <lexem BeginBlock="/" Type="Operator" />
      <lexem BeginBlock="*" Type="Operator" />
      <lexem BeginBlock="!=" Type="Operator" />
      <lexem BeginBlock="==" Type="Operator" />
      <lexem BeginBlock="-=" Type="Operator" />
      <lexem BeginBlock="+=" Type="Operator" />
      <lexem BeginBlock="=-" Type="Operator" />
      <lexem BeginBlock="=+" Type="Operator" />
      <lexem BeginBlock="*=" Type="Operator" />
      <lexem BeginBlock="/=" Type="Operator" />
      <lexem BeginBlock="=*" Type="Operator" />
      <lexem BeginBlock="=/" Type="Operator" />
      <lexem BeginBlock="++" Type="Operator" />
      <lexem BeginBlock="--" Type="Operator" />
      <lexem BeginBlock=";" Type="Operator" />
      <lexem BeginBlock="&lt;" Type="Operator" />
      <lexem BeginBlock="&gt;" Type="Operator" />
      <lexem BeginBlock=":" Type="Operator" />
      
        <lexem BeginBlock="abs" Type="Function" />
       <lexem BeginBlock="aiter" Type="Function" />
       <lexem BeginBlock="all" Type="Function" />
       <lexem BeginBlock="any" Type="Function" />
       <lexem BeginBlock="anext" Type="Function" />
       <lexem BeginBlock="ascii" Type="Function" />
       <lexem BeginBlock="bin" Type="Function" />
       <lexem BeginBlock="bool" Type="Function" />
       <lexem BeginBlock="breakpoint" Type="Function" />
       <lexem BeginBlock="bytearray" Type="Function" />
       <lexem BeginBlock="bytes" Type="Function" />
       <lexem BeginBlock="callable" Type="Function" />
       <lexem BeginBlock="chr" Type="Function" />
       <lexem BeginBlock="classmethod" Type="Function" />
       <lexem BeginBlock="compile" Type="Function" />
       <lexem BeginBlock="complex" Type="Function" />
       <lexem BeginBlock="delattr" Type="Function" />
       <lexem BeginBlock="divmod" Type="Function" />
       <lexem BeginBlock="dir" Type="Function" />
       <lexem BeginBlock="dict" Type="Function" />
       <lexem BeginBlock="enumerate" Type="Function" />
       <lexem BeginBlock="eval" Type="Function" />
       <lexem BeginBlock="exec" Type="Function" />
       <lexem BeginBlock="filter" Type="Function" />
       <lexem BeginBlock="float" Type="Function" />
       <lexem BeginBlock="format" Type="Function" />
       <lexem BeginBlock="frozenset" Type="Function" />
       <lexem BeginBlock="getattr" Type="Function" />
       <lexem BeginBlock="hasattr" Type="Function" />
       <lexem BeginBlock="globals" Type="Function" />
       <lexem BeginBlock="hash" Type="Function" />
       <lexem BeginBlock="help" Type="Function" />
       <lexem BeginBlock="hex" Type="Function" />
       <lexem BeginBlock="id" Type="Function" />
       <lexem BeginBlock="input" Type="Function" />
       <lexem BeginBlock="int" Type="Function" />
       <lexem BeginBlock="isinstance" Type="Function" />
       <lexem BeginBlock="issubclass" Type="Function" />
       <lexem BeginBlock="iter" Type="Function" />
       <lexem BeginBlock="len" Type="Function" />
       <lexem BeginBlock="list" Type="Function" />
       <lexem BeginBlock="locals" Type="Function" />
       <lexem BeginBlock="map" Type="Function" />
       <lexem BeginBlock="max" Type="Function" />
       <lexem BeginBlock="memoryview" Type="Function" />
       <lexem BeginBlock="min" Type="Function" />
       <lexem BeginBlock="next" Type="Function" />
       <lexem BeginBlock="object" Type="Function" />
       <lexem BeginBlock="ord" Type="Function" />
       <lexem BeginBlock="open" Type="Function" />
       <lexem BeginBlock="oct" Type="Function" />
       <lexem BeginBlock="pow" Type="Function" />
       <lexem BeginBlock="print" Type="Function" />
       <lexem BeginBlock="property" Type="Function" />
       <lexem BeginBlock="range" Type="Function" />
       <lexem BeginBlock="repr" Type="Function" />
       <lexem BeginBlock="reversed" Type="Function" />
       <lexem BeginBlock="round" Type="Function" />
       <lexem BeginBlock="set" Type="Function" />
       <lexem BeginBlock="setattr" Type="Function" />
       <lexem BeginBlock="slice" Type="Function" />
       <lexem BeginBlock="sorted" Type="Function" />
       <lexem BeginBlock="staticmethod" Type="Function" />
       <lexem BeginBlock="str" Type="Function" />
       <lexem BeginBlock="sum" Type="Function" />
       <lexem BeginBlock="super" Type="Function" />
       <lexem BeginBlock="tuple" Type="Function" />
       <lexem BeginBlock="type" Type="Function" />
       <lexem BeginBlock="vars" Type="Function" />
       <lexem BeginBlock="zip" Type="Function" />
       <lexem BeginBlock="__import__" Type="Function" />
       

      <lexem BeginBlock="," Type="Operator" />
      <lexem BeginBlock="False" Type="KeyWord" />
      <lexem BeginBlock="await" Type="KeyWord" />
      <lexem BeginBlock="else" Type="KeyWord" />
      <lexem BeginBlock="import" Type="KeyWord" />
      <lexem BeginBlock="pass" Type="KeyWord" />
      <lexem BeginBlock="None" Type="KeyWord" />
      <lexem BeginBlock="break" Type="KeyWord" />
      <lexem BeginBlock="except" Type="KeyWord" />
      <lexem BeginBlock="in" Type="KeyWord" />
      <lexem BeginBlock="raise" Type="KeyWord" />
      <lexem BeginBlock="True" Type="KeyWord" />
      <lexem BeginBlock="class" Type="KeyWord" />
      <lexem BeginBlock="fially" Type="KeyWord" />
      <lexem BeginBlock="is" Type="KeyWord" />
      <lexem BeginBlock="return" Type="KeyWord" />
      <lexem BeginBlock="and" Type="KeyWord" />
      <lexem BeginBlock="continue" Type="KeyWord" />
      <lexem BeginBlock="for" Type="KeyWord" DropContextPrompt="true" IsComplex="true"/>
      <lexem BeginBlock="lambda" Type="KeyWord" />
      <lexem BeginBlock="try" Type="KeyWord" />
      <lexem BeginBlock="as" Type="KeyWord" />
      <lexem BeginBlock="def" Type="KeyWord" />
      <lexem BeginBlock="from" Type="KeyWord" />
      <lexem BeginBlock="nonlocal" Type="KeyWord" />
      <lexem BeginBlock="while" Type="KeyWord" DropContextPrompt="true" IsComplex="true"/>
      <lexem BeginBlock="assert" Type="KeyWord" />
      <lexem BeginBlock="del" Type="KeyWord" />
      <lexem BeginBlock="global" Type="KeyWord" />
      <lexem BeginBlock="not" Type="KeyWord" />
      <lexem BeginBlock="with" Type="KeyWord" />
      <lexem BeginBlock="async" Type="KeyWord" />
      <lexem BeginBlock="elif" Type="KeyWord" />
      <lexem BeginBlock="if" Type="KeyWord" DropContextPrompt="true" IsComplex="true"/>
      <lexem BeginBlock="or" Type="KeyWord" />
      <lexem BeginBlock="yield" Type="KeyWord" />
  

<!--

      <lexem BeginBlock="static" Type="KeyWord" />
      <lexem BeginBlock="explicit" Type="KeyWord" />
      <lexem BeginBlock="export" Type="KeyWord" />
      <lexem BeginBlock="extern" Type="KeyWord" />
      <lexem BeginBlock="string" Type="KeyWord" />
      <lexem BeginBlock="extern" Type="KeyWord" />
      <lexem BeginBlock="struct" Type="KeyWord" />
      <lexem BeginBlock="false" Type="KeyWord" />
      <lexem BeginBlock="switch" Type="KeyWord" />
      <lexem BeginBlock="finally" Type="KeyWord" />
      <lexem BeginBlock="friend" Type="KeyWord" />
      <lexem BeginBlock="true" Type="KeyWord" />
      <lexem BeginBlock="for" Type="KeyWord" />
      <lexem BeginBlock="try" Type="KeyWord" />
      <lexem BeginBlock="typedef" Type="KeyWord" />
      <lexem BeginBlock="typeid" Type="KeyWord" />
      <lexem BeginBlock="typename" Type="KeyWord" />
      <lexem BeginBlock="goto" Type="KeyWord" />
      <lexem BeginBlock="if" Type="KeyWord" />
      <lexem BeginBlock="union" Type="KeyWord" />
      <lexem BeginBlock="unsignd" Type="KeyWord" />
      <lexem BeginBlock="int" Type="KeyWord" />
      <lexem BeginBlock="ushort" Type="KeyWord" />
      <lexem BeginBlock="interface" Type="KeyWord" />
      <lexem BeginBlock="internal" Type="KeyWord" />
      <lexem BeginBlock="virtual" Type="KeyWord" />
      <lexem BeginBlock="or" Type="KeyWord" />
      <lexem BeginBlock="xor" Type="KeyWord" />
      <lexem BeginBlock="xor_eq" Type="KeyWord" />
      <lexem BeginBlock="or_eq" Type="KeyWord" />
      <lexem BeginBlock="not_eq" Type="KeyWord" />
      <lexem BeginBlock="not" Type="KeyWord" />
      <lexem BeginBlock="inline" Type="KeyWord" />
      <lexem BeginBlock="void" Type="KeyWord" />
      <lexem BeginBlock="volatile" Type="KeyWord" />
      <lexem BeginBlock="while" Type="KeyWord" />
      <lexem BeginBlock="wchar_t" Type="KeyWord" />
  -->
      <lexem BeginBlock="/*" EndBlock="*/" Type="Comment" OnlyLocalSublexems="true" IsComplex="true"
        IsCollapsable="true" CollapseName="/*...*/">
        <SubLexems>
          <lexem BeginBlock="\n" IsBeginRegex="true" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="(" EndBlock=")" Type="Operator" IsComplex="true" IsCollapsable="false" DropContextPrompt="true"
        CollapseName="(...)">
        <SubLexems>
          <lexem BeginBlock="\n" IsBeginRegex="true" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="&quot;" EndBlock="(&quot;)|(@&quot;)" Type="String" IsEndRegex="true" IsComplex="true" OnlyLocalSublexems="true">
        <SubLexems>
          <lexem BeginBlock="\" EndBlock="&quot;" Type="String" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="'" EndBlock="'" Type="String" IsComplex="true" OnlyLocalSublexems="true">
        <SubLexems>
          <lexem BeginBlock="\" EndBlock=".+" IsEndRegex="true" Priority="2" Type="String" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="@&quot;" EndBlock="(&quot;)|(@&quot;)" Type="String" IsEndRegex="true" OnlyLocalSublexems="true" IsComplex="true">
        <SubLexems>
          <lexem BeginBlock="\n" IsBeginRegex="true" />
          <lexem BeginBlock="&quot;" EndBlock="&quot;" Type="String"/>
        </SubLexems>
      </lexem>
      <lexem BeginBlock="[" EndBlock="]" Type="Operator" IsComplex="true" IsCollapsable="false" DropContextPrompt="true"
        CollapseName="[...]">
        <SubLexems>
          <lexem BeginBlock="\" EndBlock="&quot;" Type="String" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="#" EndBlock="\n" IsEndRegex="true" Type="Comment" IsComplex="true"
        OnlyLocalSublexems="true" />
      <lexem ID="1041" EndBlock="#endregion" Type="PreprocessorKeyword" IsComplex="true" >
        <SubLexems>
          <lexem BeginBlock="\n" IsBeginRegex="true" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="#region" EndBlock="\n" Type="PreprocessorKeyword" IsEndRegex="true" OnlyLocalSublexems="true"
        IsComplex="true" IsCollapsable="true" AutoNameExpression="(#region)\s*(?text>.*).*(?!\n)\n" AutoNameTemplate="${text}"
        IsCollapseAutoNamed="true" CollapseName="Unnamed Region" NextID="1041">
        <SubLexems>
          <lexem BeginBlock=".*(?!\n)" IsBeginRegex="true" Type="Text" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="\s" IsBeginRegex="true" Type="Whitespace" />
      <lexem BeginBlock="///" EndBlock="\n" IsEndRegex="true" Type="Comment" OnlyLocalSublexems="true"
        IsComplex="true">
        <SubLexems>
          <lexem BeginBlock="" EndBlock=">" Type="Custom" FormatName="CommentXML" IsComplex="true"
            OnlyLocalSublexems="true" />
        </SubLexems>
      </lexem>
      <lexem BeginBlock="[0-9]+" IsBeginRegex="true" Type="Number" />
      <lexem BeginBlock="[0-9]+" ContinueBlock="." EndBlock="[0-9]+" IsBeginRegex="true" IsEndRegex="true" Type="Number" />
      <lexem BeginBlock="{" EndBlock="}" Type="KeyWord" IsComplex="true" IsCollapsable="true" Indent="true" DropContextPrompt="true" 
        CollapseName="{...}">
        <SubLexems>
          <lexem BeginBlock="\n" IsBeginRegex="true" />
        </SubLexems>
      </lexem>
    </lexems>
    
    <splits>
      <split>@&quot;</split>
      <split>+=</split>
      <split>/=</split>
      <split>=/</split>
      <split>*=</split>
      <split>=*</split>
      <split>==</split>
      <split>!=</split>
      <split>=+</split>
      <split>-=</split>
      <split>++</split>
      <split>-=</split>
      <split>=-</split>
      <split>--</split>
      <split>/*</split>
      <split>*/</split>
      <split>//</split>
      <split>#region</split>
      <split>#endregion</split>
      <split>///</split>
    </splits>
  </ConfigLanguage>
</ArrayOfConfigLanguage>